{"version":3,"sources":["assets/LNU_08182020.jpg","assets/LNU_08192020.jpg","assets/LNU_08202020.jpg","assets/LNU_08212020.jpg","assets/LNU_08222020.jpg","assets/LNU_08232020.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","marks","value","label","App","useState","slide","setSlide","className","Slider","onChange","event","newValue","defaultValue","aria-labelledby","valueLabelDisplay","step","min","max","length","src","dayOneFire","alt","dayTwoFire","dayThreeFire","dayFourFire","dayFiveFire","daySixFire","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,0RCUrCC,EAAQ,CACZ,CACEC,MAAO,EACPC,MAAO,QAET,CACED,MAAO,EACPC,MAAO,QAET,CACED,MAAO,EACPC,MAAO,QAET,CACED,MAAO,EACPC,MAAO,QAET,CACED,MAAO,EACPC,MAAO,QAET,CACED,MAAO,EACPC,MAAO,SAoCIC,MAhCf,WAAgB,IAAD,EAEaC,mBAAS,GAFtB,mBAENC,EAFM,KAECC,EAFD,KAQb,OACE,yBAAKC,UAAU,OACZ,yBAAKA,UAAU,aACd,kBAACC,EAAA,EAAD,CACEC,SARa,SAACC,EAAOC,GAC3BL,EAASK,IAQHC,aAAc,EACdC,kBAAgB,kBAChBC,kBAAkB,MAClBC,KAAM,EACNf,MAAOA,EACPgB,IAAK,EACLC,IAAKjB,EAAMkB,SAEb,yBAAKX,UAAqB,IAAVF,EAAc,SAAW,YAAac,IAAKC,IAAYC,IAAI,KAC3E,yBAAKd,UAAqB,IAAVF,EAAc,SAAW,YAAac,IAAKG,IAAYD,IAAI,KAC3E,yBAAKd,UAAqB,IAAVF,EAAc,SAAW,YAAac,IAAKI,IAAcF,IAAI,KAC7E,yBAAKd,UAAqB,IAAVF,EAAc,SAAW,YAAac,IAAKK,IAAaH,IAAI,KAC5E,yBAAKd,UAAqB,IAAVF,EAAc,SAAW,YAAac,IAAKM,IAAaJ,IAAI,KAC5E,yBAAKd,UAAqB,IAAVF,EAAc,SAAW,YAAac,IAAKO,IAAYL,IAAI,QCnD/DM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.91b75adf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LNU_08182020.59c55959.jpg\";","module.exports = __webpack_public_path__ + \"static/media/LNU_08192020.ccb55a6a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/LNU_08202020.d2a214bc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/LNU_08212020.9b623732.jpg\";","module.exports = __webpack_public_path__ + \"static/media/LNU_08222020.979a89a3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/LNU_08232020.cd539a98.jpg\";","import React, { useState } from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport './App.css';\nimport dayOneFire from './assets/LNU_08182020.jpg';\nimport dayTwoFire from './assets/LNU_08192020.jpg';\nimport dayThreeFire from './assets/LNU_08202020.jpg';\nimport dayFourFire from './assets/LNU_08212020.jpg';\nimport dayFiveFire from './assets/LNU_08222020.jpg';\nimport daySixFire from './assets/LNU_08232020.jpg';\n\nconst marks = [\n  {\n    value: 1,\n    label: '8/18',\n  },\n  {\n    value: 2,\n    label: '8/19',\n  },\n  {\n    value: 3,\n    label: '8/20',\n  },\n  {\n    value: 4,\n    label: '8/21',\n  },\n  {\n    value: 5,\n    label: '8/22',\n  },\n  {\n    value: 6,\n    label: '8/23',\n  },\n];\n\nfunction App() {\n\n  const [slide, setSlide] = useState(1);\n\n  const handleChange = (event, newValue) => {\n    setSlide(newValue);\n  };\n\n  return (\n    <div className=\"App\">\n       <div className=\"container\">\n        <Slider\n          onChange={handleChange}\n          defaultValue={1}\n          aria-labelledby=\"discrete-slider\"\n          valueLabelDisplay=\"off\"\n          step={1}\n          marks={marks}\n          min={1}\n          max={marks.length}\n        />\n        <img className={slide !== 1 ? 'hidden' : 'fireImage'} src={dayOneFire} alt=\"\" />\n        <img className={slide !== 2 ? 'hidden' : 'fireImage'} src={dayTwoFire} alt=\"\" />\n        <img className={slide !== 3 ? 'hidden' : 'fireImage'} src={dayThreeFire} alt=\"\" />\n        <img className={slide !== 4 ? 'hidden' : 'fireImage'} src={dayFourFire} alt=\"\" />\n        <img className={slide !== 5 ? 'hidden' : 'fireImage'} src={dayFiveFire} alt=\"\" />\n        <img className={slide !== 6 ? 'hidden' : 'fireImage'} src={daySixFire} alt=\"\" />\n       </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}